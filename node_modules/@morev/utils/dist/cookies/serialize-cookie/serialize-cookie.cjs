"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/cookies/serialize-cookie/serialize-cookie.ts
var serialize_cookie_exports = {};
__export(serialize_cookie_exports, {
  serializeCookie: () => serializeCookie
});
module.exports = __toCommonJS(serialize_cookie_exports);

// src/guards/is-date/is-date.ts
var isDate = (value, checkValidity) => {
  const isDateObject = Object.prototype.toString.call(value).includes("Date");
  if (!isDateObject)
    return false;
  if (!checkValidity)
    return isDateObject;
  return !Number.isNaN(value.getTime());
};

// src/guards/is-iterable/is-iterable.ts
var isIterable = (value) => (
  // eslint-disable-next-line unicorn/new-for-builtins
  Symbol.iterator in Object(value)
);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/guards/is-empty/is-empty.ts
var isEmpty = (value) => {
  if (typeof value === "undefined")
    return true;
  if (value === null)
    return true;
  if (value === false)
    return true;
  if (Number.isNaN(value))
    return true;
  if (value === 0)
    return true;
  if (value === BigInt(0))
    return true;
  if (value === "")
    return true;
  if (isIterable(value) && typeof value === "object" && "length" in value && value.length === 0)
    return true;
  if (isIterable(value) && typeof value === "object" && "size" in value && value.size === 0)
    return true;
  if (isObject(value))
    return !Object.keys(value).length;
  return false;
};

// src/guards/is-null/is-null.ts
var isNull = (value) => value === null;

// src/guards/is-undefined/is-undefined.ts
var isUndefined = (value) => typeof value === "undefined";

// src/guards/is-nullish/is-nullish.ts
var isNullish = (value) => isNull(value) || isUndefined(value);

// src/objects/merge-objects/merge-objects.ts
var _mergeObjects = (defaults, input, stack = "", merger) => {
  const result = { ...defaults };
  if (!isObject(input))
    return result;
  Object.entries(input).forEach(([key, val]) => {
    if (merger?.(result, key, val, stack))
      return;
    if (isObject(val) && isObject(result[key])) {
      Object.assign(result, { [key]: _mergeObjects(result[key], val, (stack ? `${stack}.` : "") + key, merger) });
    } else {
      Object.assign(result, { [key]: val });
    }
  });
  return result;
};
var createMergeObjects = (merger) => (...args) => args.reduce((p, c) => _mergeObjects(p, c, "", merger), {});
var mergeObjects = createMergeObjects();

// src/cookies/serialize-cookie/serialize-cookie.ts
var DEFAULT_OPTIONS = {
  encodeValue: true
};
var serializeCookie = (cookie, userOptions) => {
  const options = mergeObjects(DEFAULT_OPTIONS, userOptions);
  const value = options.encodeValue ? encodeURIComponent(cookie.value) : cookie.value;
  let cookieString = cookie.name ? `${cookie.name}=${value}` : value;
  if ("maxAge" in cookie && !isNullish(cookie.maxAge)) {
    const maybeMaxAge = parseInt(`${cookie.maxAge}`, 10);
    if (!Number.isNaN(maybeMaxAge) && Number.isFinite(maybeMaxAge)) {
      cookieString += `; Max-Age=${maybeMaxAge}`;
    }
  }
  if ("domain" in cookie && !isEmpty(cookie.domain)) {
    cookieString += `; Domain=${cookie.domain}`;
  }
  if ("path" in cookie && !isEmpty(cookie.path)) {
    cookieString += `; Path=${cookie.path}`;
  }
  if ("expires" in cookie && isDate(cookie.expires, true)) {
    cookieString += `; Expires=${cookie.expires.toUTCString()}`;
  }
  if (cookie.httpOnly) {
    cookieString += "; HttpOnly";
  }
  if (cookie.secure) {
    cookieString += "; Secure";
  }
  if (cookie.partitioned) {
    cookieString += "; Partitioned";
  }
  if (cookie.sameSite) {
    if (cookie.sameSite === "Strict" || cookie.sameSite === "Lax" || cookie.sameSite === "None") {
      cookieString += `; SameSite=${cookie.sameSite}`;
    }
  }
  if (cookie.priority) {
    if (cookie.priority === "Low" || cookie.priority === "Medium" || cookie.priority === "High") {
      cookieString += `; Priority=${cookie.priority}`;
    }
  }
  return cookieString;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  serializeCookie
});
