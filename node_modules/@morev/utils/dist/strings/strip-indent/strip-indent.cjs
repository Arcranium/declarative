"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/strings/strip-indent/strip-indent.ts
var strip_indent_exports = {};
__export(strip_indent_exports, {
  stripIndent: () => stripIndent
});
module.exports = __toCommonJS(strip_indent_exports);

// src/guards/is-object/is-object.ts
var isObject = (value) => Object.prototype.toString.call(value).includes("Object");

// src/objects/merge-objects/merge-objects.ts
var _mergeObjects = (defaults, input, stack = "", merger) => {
  const result = { ...defaults };
  if (!isObject(input))
    return result;
  Object.entries(input).forEach(([key, val]) => {
    if (merger?.(result, key, val, stack))
      return;
    if (isObject(val) && isObject(result[key])) {
      Object.assign(result, { [key]: _mergeObjects(result[key], val, (stack ? `${stack}.` : "") + key, merger) });
    } else {
      Object.assign(result, { [key]: val });
    }
  });
  return result;
};
var createMergeObjects = (merger) => (...args) => args.reduce((p, c) => _mergeObjects(p, c, "", merger), {});
var mergeObjects = createMergeObjects();

// src/strings/strip-indent/strip-indent.ts
var _getMinimalIndent = (input) => {
  const match = input.match(/^[\t ]*(?=\S)/gm);
  if (!match)
    return 0;
  return match.reduce((minimalIndentation, spacings) => Math.min(minimalIndentation, spacings.length), Infinity);
};
var DEFAULTS = {
  trimLeadingSpacings: true,
  trimTrailingSpacings: true
};
var _applyOptions = (input, options) => {
  options.trimLeadingSpacings && (input = input.replace(/^\n\s*(?=\S)/, ""));
  options.trimTrailingSpacings && (input = input.replace(/\n\s*$/, ""));
  return input;
};
var stripIndent = (input, userOptions) => {
  const options = mergeObjects(DEFAULTS, userOptions);
  const minIndent = _getMinimalIndent(input);
  if (minIndent === 0)
    return _applyOptions(input, options);
  const regex = new RegExp(`^[	 ]{${minIndent}}`, "gm");
  return _applyOptions(input, options).replace(regex, "");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  stripIndent
});
